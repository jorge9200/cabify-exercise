{"ast":null,"code":"var _jsxFileName = \"/Users/jorge/projects/exercises/cabify-exercise/src/Checkout.js\";\nimport React, { Component } from 'react';\nimport Store from './containers/Store';\nimport memoize from 'memoize-one';\n\nclass Checkout extends Component {\n  constructor(props) {\n    super(props); // Initiate the cart state object with the products quantity to 0\n\n    this.cartDiscounts = memoize((cart, discounts) => discounts.map(discount => ({\n      totalDiscounted: discount.condition(cart) ? discount.formula(cart) : 0,\n      ...discount\n    })));\n    this.state = {\n      cart: props.pricingRules.products.reduce((acc, cur) => ({ ...acc,\n        [cur.id]: {\n          price: cur.price,\n          quantity: 0,\n          totalPrice: 0\n        }\n      }), {})\n    };\n  } // Public method scan, recieves itemId and adds the item to the cart\n\n\n  scan(itemId) {\n    const newQuantity = this.state.cart[itemId].quantity + 1;\n\n    this._updateCart(itemId, newQuantity);\n  } //Public method total, returns total price with discounts\n\n\n  total() {\n    return this._getTotalPrice() - this._getTotalDiscounted();\n  } // Cart discounts memorized with their total discounted price for the cart state\n\n\n  // Private method uptadeCart, revieves itemId and value and updates the cart item\n  _updateCart(itemId, value) {\n    // If not a number o inferior to zero, set to zero\n    const newQuantity = !Number(value) || Number(value) < 0 ? 0 : Number(value);\n    const newCart = { ...this.state.cart,\n      [itemId]: { ...this.state.cart[itemId],\n        quantity: newQuantity,\n        totalPrice: this.state.cart[itemId].price * newQuantity\n      }\n    };\n    this.setState({\n      cart: newCart\n    });\n  } // Private method getCartDiscounts, returns the the object cartDiscounts (an object with the discounts applied)\n\n\n  _getCartDiscounts() {\n    return this.cartDiscounts(this.state.cart, this.props.pricingRules.discounts);\n  } // Private method getTotalPrice, returns total price without discounts\n\n\n  _getTotalPrice() {\n    return Object.values(this.state.cart).map(item => item.totalPrice).reduce((a, b) => a + b, 0);\n  } // Private method getTotalDiscounted, returns total price discounted\n\n\n  _getTotalDiscounted() {\n    return this._getCartDiscounts().map(disc => disc.totalDiscounted).reduce((a, b) => a + b, 0);\n  } // Render Checkout Store\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Store, {\n      products: this.props.pricingRules.products,\n      cart: this.state.cart,\n      cartDiscounts: this._getCartDiscounts(),\n      updateCart: this._updateCart.bind(this),\n      totalPrice: this._getTotalPrice(),\n      total: this.total(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Checkout;","map":{"version":3,"sources":["/Users/jorge/projects/exercises/cabify-exercise/src/Checkout.js"],"names":["React","Component","Store","memoize","Checkout","constructor","props","cartDiscounts","cart","discounts","map","discount","totalDiscounted","condition","formula","state","pricingRules","products","reduce","acc","cur","id","price","quantity","totalPrice","scan","itemId","newQuantity","_updateCart","total","_getTotalPrice","_getTotalDiscounted","value","Number","newCart","setState","_getCartDiscounts","Object","values","item","a","b","disc","render","bind"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Store from './containers/Store'\nimport memoize from 'memoize-one';\n\nclass Checkout extends Component{\n\n  constructor(props){\n    super(props)\n\n    // Initiate the cart state object with the products quantity to 0\n    this.state = {\n      cart: props.pricingRules.products.reduce((acc, cur) => ({ ...acc, [cur.id]: {\n              price: cur.price,\n              quantity: 0,\n              totalPrice: 0,\n            }}), {})\n    }\n  }\n\n  // Public method scan, recieves itemId and adds the item to the cart\n  scan(itemId){\n    const newQuantity = this.state.cart[itemId].quantity + 1\n    this._updateCart(itemId, newQuantity)\n  }\n\n  //Public method total, returns total price with discounts\n  total() {\n    return this._getTotalPrice() - this._getTotalDiscounted()\n  }\n\n  // Cart discounts memorized with their total discounted price for the cart state\n  cartDiscounts = memoize(\n    (cart, discounts) =>\n      discounts.map(discount => ({\n        totalDiscounted: discount.condition(cart) ? discount.formula(cart) : 0,\n        ...discount\n      }))\n  )\n\n  // Private method uptadeCart, revieves itemId and value and updates the cart item\n  _updateCart(itemId, value) {\n    // If not a number o inferior to zero, set to zero\n    const newQuantity = !Number(value) || Number(value) < 0 ? 0 : Number(value)\n\n    const newCart = {\n      ...this.state.cart,\n      [itemId]: {\n        ...this.state.cart[itemId],\n        quantity: newQuantity,\n        totalPrice: this.state.cart[itemId].price * newQuantity\n      }\n    }\n\n    this.setState({ cart: newCart })\n  }\n\n  // Private method getCartDiscounts, returns the the object cartDiscounts (an object with the discounts applied)\n  _getCartDiscounts(){\n    return this.cartDiscounts(this.state.cart, this.props.pricingRules.discounts)\n  }\n\n  // Private method getTotalPrice, returns total price without discounts\n  _getTotalPrice(){\n    return Object.values(this.state.cart).map(item => item.totalPrice).reduce((a, b) => a + b, 0)\n  }\n\n  // Private method getTotalDiscounted, returns total price discounted\n  _getTotalDiscounted(){\n    return this._getCartDiscounts().map(disc => disc.totalDiscounted).reduce((a, b) => a + b, 0)\n  }\n\n  // Render Checkout Store\n  render() {\n    return (\n      <div className=\"App\">\n        <Store\n          products={this.props.pricingRules.products}\n          cart={this.state.cart}\n          cartDiscounts={this._getCartDiscounts()}\n          updateCart={this._updateCart.bind(this)}\n          totalPrice={this._getTotalPrice()}\n          total={this.total()}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}